
//----------------------------------------------------
// The following code was generated by CUP v0.11a czt01 beta
// Wed Sep 24 17:45:57 CEST 2014
//----------------------------------------------------

package fr.loria.orpailleur.revisor.engine.revisorPL.console.parser;

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import fr.loria.orpailleur.revisor.engine.core.console.exception.ParserException;
import fr.loria.orpailleur.revisor.engine.core.console.formula.Formula;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Clear;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Display;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Instruction;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Load;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.RevisorConsolePL;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Adapt;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_And;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Equ;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Identifier;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Impl;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Not;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Or;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Revise;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_SimplifiedDNF;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Xor;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_Assignment;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_GetWeight;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_Help;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_ResetWeights;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_SetWeight;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_Weights;
import fr.loria.orpailleur.revisor.engine.revisorPL.pl.formulae.PLFormula;

/** CUP v0.11a czt01 beta generated parser.
  * @version Wed Sep 24 17:45:57 CEST 2014
  */
public class PLConsoleParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PLConsoleParser() {super();}

  /** Constructor which sets the default scanner. */
  public PLConsoleParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PLConsoleParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\005\000\002\002\003\000" +
    "\002\002\005\000\002\003\006\000\002\003\005\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\005\000\002\006\004" +
    "\000\002\006\006\000\002\006\012\000\002\006\010\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\034\005\023\011\011\017\005\020\025\021" +
    "\010\022\020\023\016\024\026\025\024\026\022\027\015" +
    "\030\017\031\012\001\002\000\004\002\077\001\002\000" +
    "\004\002\000\001\002\000\022\002\ufff4\006\ufff4\007\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\001\002\000" +
    "\022\002\ufff1\006\ufff1\007\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\001\002\000\004\002\ufffe\001\002\000" +
    "\020\005\023\011\011\025\024\026\022\027\015\030\017" +
    "\031\035\001\002\000\022\002\ufff3\004\073\010\072\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\001\002\000\006" +
    "\002\ufff9\004\070\001\002\000\016\002\ufffb\012\037\013" +
    "\042\014\040\015\041\016\043\001\002\000\004\005\063" +
    "\001\002\000\004\002\ufffc\001\002\000\022\002\ufff2\006" +
    "\ufff2\007\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\001\002\000\004\023\062\001\002\000\022\002\ufff5\006" +
    "\ufff5\007\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\001\002\000\004\005\053\001\002\000\020\005\023\011" +
    "\011\025\024\026\022\027\015\030\017\031\035\001\002" +
    "\000\004\005\033\001\002\000\004\032\032\001\002\000" +
    "\004\005\027\001\002\000\004\031\030\001\002\000\004" +
    "\006\031\001\002\000\006\002\ufff7\004\ufff7\001\002\000" +
    "\004\002\uffff\001\002\000\020\005\023\011\011\025\024" +
    "\026\022\027\015\030\017\031\035\001\002\000\016\006" +
    "\036\012\037\013\042\014\040\015\041\016\043\001\002" +
    "\000\022\002\ufff3\006\ufff3\007\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\001\002\000\022\002\uffee\006\uffee" +
    "\007\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\001" +
    "\002\000\020\005\023\011\011\025\024\026\022\027\015" +
    "\030\017\031\035\001\002\000\020\005\023\011\011\025" +
    "\024\026\022\027\015\030\017\031\035\001\002\000\020" +
    "\005\023\011\011\025\024\026\022\027\015\030\017\031" +
    "\035\001\002\000\020\005\023\011\011\025\024\026\022" +
    "\027\015\030\017\031\035\001\002\000\020\005\023\011" +
    "\011\025\024\026\022\027\015\030\017\031\035\001\002" +
    "\000\022\002\uffe7\006\uffe7\007\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\001\002\000\022\002\uffea\006\uffea" +
    "\007\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\001" +
    "\002\000\022\002\uffe8\006\uffe8\007\uffe8\012\037\013\042" +
    "\014\uffe8\015\uffe8\016\043\001\002\000\022\002\uffe9\006" +
    "\uffe9\007\uffe9\012\037\013\042\014\uffe9\015\uffe9\016\043" +
    "\001\002\000\022\002\uffeb\006\uffeb\007\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\001\002\000\016\006\052" +
    "\012\037\013\042\014\040\015\041\016\043\001\002\000" +
    "\022\002\ufff0\006\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\001\002\000\020\005\023\011\011\025" +
    "\024\026\022\027\015\030\017\031\035\001\002\000\016" +
    "\007\055\012\037\013\042\014\040\015\041\016\043\001" +
    "\002\000\020\005\023\011\011\025\024\026\022\027\015" +
    "\030\017\031\035\001\002\000\016\007\057\012\037\013" +
    "\042\014\040\015\041\016\043\001\002\000\020\005\023" +
    "\011\011\025\024\026\022\027\015\030\017\031\035\001" +
    "\002\000\016\006\061\012\037\013\042\014\040\015\041" +
    "\016\043\001\002\000\022\002\uffed\006\uffed\007\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\001\002\000\004" +
    "\002\ufffd\001\002\000\020\005\023\011\011\025\024\026" +
    "\022\027\015\030\017\031\035\001\002\000\016\007\065" +
    "\012\037\013\042\014\040\015\041\016\043\001\002\000" +
    "\020\005\023\011\011\025\024\026\022\027\015\030\017" +
    "\031\035\001\002\000\016\006\067\012\037\013\042\014" +
    "\040\015\041\016\043\001\002\000\022\002\uffec\006\uffec" +
    "\007\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\001" +
    "\002\000\004\033\071\001\002\000\004\002\ufff8\001\002" +
    "\000\004\024\075\001\002\000\020\005\023\011\011\025" +
    "\024\026\022\027\015\030\017\031\035\001\002\000\016" +
    "\002\ufffa\012\037\013\042\014\040\015\041\016\043\001" +
    "\002\000\006\002\ufff6\004\ufff6\001\002\000\022\002\uffef" +
    "\006\uffef\007\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\016\002\003\003\012\004\013\005\020\006" +
    "\006\007\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\075\006\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\050\005\020\006\006\007" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\033\005\020\006\006" +
    "\007\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\047\005\020\006\006\007\005" +
    "\001\001\000\012\004\046\005\020\006\006\007\005\001" +
    "\001\000\012\004\045\005\020\006\006\007\005\001\001" +
    "\000\012\004\044\005\020\006\006\007\005\001\001\000" +
    "\012\004\043\005\020\006\006\007\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\053\005\020\006\006\007\005\001\001\000" +
    "\002\001\001\000\012\004\055\005\020\006\006\007\005" +
    "\001\001\000\002\001\001\000\012\004\057\005\020\006" +
    "\006\007\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\063\005\020\006\006\007" +
    "\005\001\001\000\002\001\001\000\012\004\065\005\020" +
    "\006\006\007\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\073\005\020\006\006\007\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PLConsoleParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$PLConsoleParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PLConsoleParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}



	
	// Fields :
	
	private RevisorConsolePL console;
	private String inputText;
	private String errorMessages;
	
	// Constructors :
	
	public PLConsoleParser(final RevisorConsolePL console, final String inputText) {
		super();
		this.console = console;
		this.inputText = inputText;
	}
	
	public PLConsoleParser(final RevisorConsolePL console, final String inputText, final Scanner scanner) {
		super(scanner);
		this.console = console;
		this.inputText = inputText;
	}
	
	public PLConsoleParser(final RevisorConsolePL console, final String inputText, final Scanner scanner, final SymbolFactory factory) {
		super(scanner, factory);
		this.console = console;
		this.inputText = inputText;
	}
	
	// Getters :
	
	public RevisorConsolePL getConsole() {
		return this.console;
	}
	
	public String getInputText() {
		return this.inputText;
	}
	
	public String getErrorMessage() {
		return this.errorMessages;
	}
	
	// Methods :
	
	private void addErrorMessage(String message) {
		if(this.errorMessages == null || this.errorMessages.isEmpty()) {
			this.errorMessages = message;
		}
		else {
			this.errorMessages += "\n" + message;
		}
	}
	
	@Override
	public void report_error(String message, Object info) {
		StringBuffer buffer = new StringBuffer("Parsing Error");
		
		if(info instanceof Symbol) {
			Symbol s = (Symbol) info;
			
			if(s.left >= 0) {
				buffer.append(" at line " + (s.left + 1));
				
				if(s.right >= 0) {
					buffer.append(", column " + (s.right + 1));
				}
			}
		}
		
		buffer.append(" : " + message);
		this.addErrorMessage(buffer.toString());
	}
	
	@Override
	public void report_fatal_error(String message, Object info) throws ParserException {
		this.done_parsing();
		this.report_error(message, info);
		throw new ParserException(this.errorMessages);
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("unused")
class CUP$PLConsoleParser$actions {
  private final PLConsoleParser parser;

  /** Constructor */
  CUP$PLConsoleParser$actions(PLConsoleParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PLConsoleParser$do_action(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;

      /* select the action based on the action number */
      switch (CUP$PLConsoleParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BinaryPropExpression ::= PropExpression XOR PropExpression 
            {
               CUP$PLConsoleParser$result = case26(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BinaryPropExpression ::= PropExpression EQU PropExpression 
            {
               CUP$PLConsoleParser$result = case25(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BinaryPropExpression ::= PropExpression IMPL PropExpression 
            {
               CUP$PLConsoleParser$result = case24(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BinaryPropExpression ::= PropExpression OR PropExpression 
            {
               CUP$PLConsoleParser$result = case23(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BinaryPropExpression ::= PropExpression AND PropExpression 
            {
               CUP$PLConsoleParser$result = case22(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // UnaryPropExpressionNotId ::= REVISE L_PAR PropExpression COMMA PropExpression R_PAR 
            {
               CUP$PLConsoleParser$result = case21(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // UnaryPropExpressionNotId ::= ADAPT L_PAR PropExpression COMMA PropExpression COMMA PropExpression R_PAR 
            {
               CUP$PLConsoleParser$result = case20(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // UnaryPropExpressionNotId ::= DNF L_PAR PropExpression R_PAR 
            {
               CUP$PLConsoleParser$result = case19(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UnaryPropExpressionNotId ::= NOT UnaryPropExpression 
            {
               CUP$PLConsoleParser$result = case18(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UnaryPropExpressionNotId ::= L_PAR PropExpression R_PAR 
            {
               CUP$PLConsoleParser$result = case17(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnaryPropExpression ::= UnaryPropExpressionNotId 
            {
               CUP$PLConsoleParser$result = case16(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnaryPropExpression ::= BOOLEAN 
            {
               CUP$PLConsoleParser$result = case15(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnaryPropExpression ::= IDENTIFIER 
            {
               CUP$PLConsoleParser$result = case14(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PropExpression ::= BinaryPropExpression 
            {
               CUP$PLConsoleParser$result = case13(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PropExpression ::= UnaryPropExpression 
            {
               CUP$PLConsoleParser$result = case12(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableWeight ::= IDENTIFIER DOT WEIGHT 
            {
               CUP$PLConsoleParser$result = case11(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableWeight ::= WEIGHT L_PAR IDENTIFIER R_PAR 
            {
               CUP$PLConsoleParser$result = case10(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= VariableWeight ASSIGN POSITIVE_REAL 
            {
               CUP$PLConsoleParser$result = case9(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= VariableWeight 
            {
               CUP$PLConsoleParser$result = case8(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruction ::= IDENTIFIER ASSIGN PropExpression 
            {
               CUP$PLConsoleParser$result = case7(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= PropExpression 
            {
               CUP$PLConsoleParser$result = case6(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= WEIGHTS 
            {
               CUP$PLConsoleParser$result = case5(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instruction ::= RESET WEIGHTS 
            {
               CUP$PLConsoleParser$result = case4(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instruction ::= CLEAR 
            {
               CUP$PLConsoleParser$result = case3(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Instruction ::= LOAD FILE 
            {
               CUP$PLConsoleParser$result = case2(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Instruction ::= HELP 
            {
               CUP$PLConsoleParser$result = case1(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          return CUP$PLConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Instruction EOF 
            {
               CUP$PLConsoleParser$result = case0(
                 CUP$PLConsoleParser$act_num,
                 CUP$PLConsoleParser$parser,
                 CUP$PLConsoleParser$stack,
                 CUP$PLConsoleParser$top);
            }
          /* ACCEPT */
          CUP$PLConsoleParser$parser.done_parsing();
          return CUP$PLConsoleParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }/*1*/
    //BinaryPropExpression ::= PropExpression XOR PropExpression 
    java_cup.runtime.Symbol case26(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).left;
		int e1right = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e1 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).value;
		int e2left = CUP$PLConsoleParser$stack.peek().left;
		int e2right = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e2 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_Xor<>(e1, e2); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",5, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression EQU PropExpression 
    java_cup.runtime.Symbol case25(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).left;
		int e1right = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e1 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).value;
		int e2left = CUP$PLConsoleParser$stack.peek().left;
		int e2right = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e2 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_Equ<>(e1, e2); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",5, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression IMPL PropExpression 
    java_cup.runtime.Symbol case24(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).left;
		int e1right = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e1 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).value;
		int e2left = CUP$PLConsoleParser$stack.peek().left;
		int e2right = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e2 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_Impl<>(e1, e2); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",5, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression OR PropExpression 
    java_cup.runtime.Symbol case23(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).left;
		int e1right = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e1 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).value;
		int e2left = CUP$PLConsoleParser$stack.peek().left;
		int e2right = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e2 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_Or<>(e1, e2); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",5, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression AND PropExpression 
    java_cup.runtime.Symbol case22(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).left;
		int e1right = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e1 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).value;
		int e2left = CUP$PLConsoleParser$stack.peek().left;
		int e2right = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e2 = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_And<>(e1, e2); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",5, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= REVISE L_PAR PropExpression COMMA PropExpression R_PAR 
    java_cup.runtime.Symbol case21(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int psileft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-3).left;
		int psiright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-3).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> psi = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-3).value;
		int muleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).left;
		int muright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> mu = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).value;
		 RESULT = new PL_Revise<>(psi, mu); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",4, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-5), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= ADAPT L_PAR PropExpression COMMA PropExpression COMMA PropExpression R_PAR 
    java_cup.runtime.Symbol case20(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int dkleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-5).left;
		int dkright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-5).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> dk = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-5).value;
		int sourceleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-3).left;
		int sourceright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-3).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> source = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-3).value;
		int targetleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).left;
		int targetright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> target = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).value;
		 RESULT = new PL_Adapt<>(dk, source, target); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",4, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-7), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= DNF L_PAR PropExpression R_PAR 
    java_cup.runtime.Symbol case19(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).left;
		int eright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).value;
		 RESULT = new PL_SimplifiedDNF<>(e); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",4, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-3), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= NOT UnaryPropExpression 
    java_cup.runtime.Symbol case18(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLConsoleParser$stack.peek().left;
		int eright = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_Not<>(e); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",4, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= L_PAR PropExpression R_PAR 
    java_cup.runtime.Symbol case17(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).left;
		int eright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).value;
		 RESULT = e; /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",4, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //UnaryPropExpression ::= UnaryPropExpressionNotId 
    java_cup.runtime.Symbol case16(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLConsoleParser$stack.peek().left;
		int eright = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = e; /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpression",3, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //UnaryPropExpression ::= BOOLEAN 
    java_cup.runtime.Symbol case15(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int bleft = CUP$PLConsoleParser$stack.peek().left;
		int bright = CUP$PLConsoleParser$stack.peek().right;
		Boolean b = (Boolean) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_Identifier<>(b ? "true" : "false"); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpression",3, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //UnaryPropExpression ::= IDENTIFIER 
    java_cup.runtime.Symbol case14(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int idleft = CUP$PLConsoleParser$stack.peek().left;
		int idright = CUP$PLConsoleParser$stack.peek().right;
		String id = (String) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_Identifier<>(id); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpression",3, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //PropExpression ::= BinaryPropExpression 
    java_cup.runtime.Symbol case13(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLConsoleParser$stack.peek().left;
		int eright = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = e; /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("PropExpression",2, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //PropExpression ::= UnaryPropExpression 
    java_cup.runtime.Symbol case12(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Formula<RevisorConsolePL,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLConsoleParser$stack.peek().left;
		int eright = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = e; /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("PropExpression",2, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //VariableWeight ::= IDENTIFIER DOT WEIGHT 
    java_cup.runtime.Symbol case11(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      PL_Identifier<RevisorConsolePL> RESULT =null;/*3*/
		int idleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).left;
		int idright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).right;
		String id = (String) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).value;
		 RESULT = new PL_Identifier<>(id); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("VariableWeight",1, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //VariableWeight ::= WEIGHT L_PAR IDENTIFIER R_PAR 
    java_cup.runtime.Symbol case10(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      PL_Identifier<RevisorConsolePL> RESULT =null;/*3*/
		int idleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).left;
		int idright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).right;
		String id = (String) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).value;
		 RESULT = new PL_Identifier<>(id); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("VariableWeight",1, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-3), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= VariableWeight ASSIGN POSITIVE_REAL 
    java_cup.runtime.Symbol case9(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		int idleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).left;
		int idright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") PL_Identifier<RevisorConsolePL> id = (PL_Identifier<RevisorConsolePL>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).value;
		int valleft = CUP$PLConsoleParser$stack.peek().left;
		int valright = CUP$PLConsoleParser$stack.peek().right;
		Double val = (Double) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_SetWeight<>(this.parser.getConsole(), this.parser.getInputText(), id, val); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= VariableWeight 
    java_cup.runtime.Symbol case8(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		int idleft = CUP$PLConsoleParser$stack.peek().left;
		int idright = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PL_Identifier<RevisorConsolePL> id = (PL_Identifier<RevisorConsolePL>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_GetWeight<>(this.parser.getConsole(), this.parser.getInputText(), id); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER ASSIGN PropExpression 
    java_cup.runtime.Symbol case7(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		int idleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).left;
		int idright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).right;
		String id = (String) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2).value;
		int eleft = CUP$PLConsoleParser$stack.peek().left;
		int eright = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new PL_Assignment<>(this.parser.getConsole(), this.parser.getInputText(), new PL_Identifier<RevisorConsolePL>(id), e); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-2), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= PropExpression 
    java_cup.runtime.Symbol case6(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		int eleft = CUP$PLConsoleParser$stack.peek().left;
		int eright = CUP$PLConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePL,PLFormula> e = (Formula<RevisorConsolePL,PLFormula>) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new Display<>(this.parser.getConsole(), this.parser.getInputText(), e); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= WEIGHTS 
    java_cup.runtime.Symbol case5(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		 RESULT = new PL_Weights<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= RESET WEIGHTS 
    java_cup.runtime.Symbol case4(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		 RESULT = new PL_ResetWeights<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= CLEAR 
    java_cup.runtime.Symbol case3(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		 RESULT = new Clear<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= LOAD FILE 
    java_cup.runtime.Symbol case2(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		int fileleft = CUP$PLConsoleParser$stack.peek().left;
		int fileright = CUP$PLConsoleParser$stack.peek().right;
		String file = (String) CUP$PLConsoleParser$stack.peek().value;
		 RESULT = new Load<>(this.parser.getConsole(), this.parser.getInputText(), file); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //Instruction ::= HELP 
    java_cup.runtime.Symbol case1(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Instruction<RevisorConsolePL> RESULT =null;/*3*/
		 RESULT = new PL_Help<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLConsoleParser$stack.peek(), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
    //$START ::= Instruction EOF 
    java_cup.runtime.Symbol case0(
    int                        CUP$PLConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLConsoleParser$stack,
    int                        CUP$PLConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLConsoleParser$result;
      Object RESULT =null;/*3*/
		int start_valleft = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).left;
		int start_valright = CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Instruction<RevisorConsolePL> start_val = (Instruction<RevisorConsolePL>) CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1).value;
		RESULT = start_val;/*5*/
              CUP$PLConsoleParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$PLConsoleParser$stack.elementAt(CUP$PLConsoleParser$top-1), CUP$PLConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLConsoleParser$result;/*8*/

    }
}

