
//----------------------------------------------------
// The following code was generated by CUP v0.11a czt01 beta
// Wed Sep 24 17:45:58 CEST 2014
//----------------------------------------------------

package fr.loria.orpailleur.revisor.engine.revisorPLAK.console.parser;

import java.util.Set;
import java.util.TreeSet;
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import fr.loria.orpailleur.revisor.engine.core.console.exception.ParserException;
import fr.loria.orpailleur.revisor.engine.core.console.formula.Expression;
import fr.loria.orpailleur.revisor.engine.core.console.formula.Formula;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Clear;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Display;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Instruction;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Load;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Adapt;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_And;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Equ;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Identifier;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Impl;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Literal;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_LiteralSet;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Not;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Or;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Revise;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_SimplifiedDNF;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.formula.PL_Xor;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_Assignment;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_GetWeight;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_ResetWeights;
import fr.loria.orpailleur.revisor.engine.revisorPL.console.instruction.PL_SetWeight;
import fr.loria.orpailleur.revisor.engine.revisorPL.pl.formulae.PLFormula;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.RevisorConsolePLAK;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.formula.PLAK_Adapt;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.formula.PLAK_Identifier;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.formula.PLAK_Revise;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.formula.PLAK_Rule;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.formula.PLAK_RuleIdentifier;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.formula.PLAK_RuleSet;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.formula.PLAK_RuleSetIdentifier;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_AddRule;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_Assignment;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_FlipCosts;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_GetDefaultRuleCost;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_GetFlipCost;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_GetRuleCost;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_GetUseDefaultRuleSet;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_Help;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_RemoveRule;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_ResetFlipCosts;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_ResetRuleCosts;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_RuleAssignment;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_RuleSetAssignment;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_RuleSets;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_Rules;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_SetDefaultRuleCost;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_SetFlipCost;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_SetRuleCost;
import fr.loria.orpailleur.revisor.engine.revisorPLAK.console.instruction.PLAK_SetUseDefaultRuleSet;

/** CUP v0.11a czt01 beta generated parser.
  * @version Wed Sep 24 17:45:58 CEST 2014
  */
public class PLAKConsoleParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PLAKConsoleParser() {super();}

  /** Constructor which sets the default scanner. */
  public PLAKConsoleParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PLAKConsoleParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\005\000\002" +
    "\002\007\000\002\002\004\000\002\002\006\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\003\000\002\002\005\000\002\002" +
    "\003\000\002\002\005\000\002\002\003\000\002\002\005" +
    "\000\002\003\006\000\002\003\005\000\002\013\006\000" +
    "\002\013\007\000\002\013\005\000\002\013\006\000\002" +
    "\004\006\000\002\004\005\000\002\005\003\000\002\005" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\005\000" +
    "\002\010\004\000\002\010\006\000\002\010\012\000\002" +
    "\010\010\000\002\010\014\000\002\010\012\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\016\003\000\002\016\003\000" +
    "\002\020\004\000\002\020\005\000\002\021\003\000\002" +
    "\021\005\000\002\015\003\000\002\015\003\000\002\017" +
    "\012\000\002\017\010\000\002\023\002\000\002\023\003" +
    "\000\002\014\002\000\002\014\003\000\002\022\003\000" +
    "\002\022\005\000\002\012\003\000\002\012\004" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\056\013\035\015\021\017\022\021\014\027" +
    "\006\030\036\031\012\032\026\033\023\034\044\035\043" +
    "\036\017\040\042\041\005\042\010\044\040\045\041\046" +
    "\034\047\033\050\024\051\025\052\015\001\002\000\004" +
    "\002\224\001\002\000\004\002\ufff8\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufff1\001\002\000\004\002\ufff7" +
    "\001\002\000\016\002\uffd6\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\001\002\000\004\002\ufffe\001\002\000\016" +
    "\002\uffd7\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\001" +
    "\002\000\020\013\035\021\066\046\034\047\033\050\024" +
    "\051\025\052\221\001\002\000\026\002\ufff2\004\205\005" +
    "\203\006\206\011\204\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\001\002\000\006\002\uffe7\004\201\001\002\000" +
    "\004\013\173\001\002\000\014\022\072\023\074\024\073" +
    "\025\076\026\075\001\002\000\010\016\166\017\022\052" +
    "\167\001\002\000\006\020\uffbc\054\143\001\002\000\004" +
    "\002\ufffa\001\002\000\004\013\132\001\002\000\022\002" +
    "\uffd4\010\uffd4\014\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\001\002\000\010\033\127\035\130\037\131\001" +
    "\002\000\006\002\uffe3\004\125\001\002\000\004\002\ufff0" +
    "\001\002\000\006\002\uffe5\004\123\001\002\000\022\002" +
    "\uffd9\010\uffd9\014\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\001\002\000\004\013\107\001\002\000\004\013" +
    "\104\001\002\000\020\013\035\021\066\046\034\047\033" +
    "\050\024\051\025\052\065\001\002\000\004\053\062\001" +
    "\002\000\004\002\uffef\001\002\000\004\045\056\001\002" +
    "\000\004\040\053\001\002\000\004\013\050\001\002\000" +
    "\004\002\ufff9\001\002\000\004\013\045\001\002\000\004" +
    "\052\046\001\002\000\004\014\047\001\002\000\006\002" +
    "\uffe1\004\uffe1\001\002\000\004\052\051\001\002\000\004" +
    "\014\052\001\002\000\006\002\uffdb\004\uffdb\001\002\000" +
    "\006\002\ufff4\004\054\001\002\000\004\054\055\001\002" +
    "\000\004\002\ufff3\001\002\000\004\043\057\001\002\000" +
    "\006\002\ufff6\004\060\001\002\000\004\051\061\001\002" +
    "\000\004\002\ufff5\001\002\000\004\002\uffff\001\002\000" +
    "\016\014\071\022\072\023\074\024\073\025\076\026\075" +
    "\001\002\000\022\002\uffd8\010\uffd8\014\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\001\002\000\022\002\uffd5" +
    "\010\uffd5\014\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\001\002\000\020\013\035\021\066\046\034\047\033" +
    "\050\024\051\025\052\065\001\002\000\022\002\uffd3\010" +
    "\uffd3\014\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\001\002\000\022\002\uffd1\010\uffd1\014\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\001\002\000\022\002\uffd2" +
    "\010\uffd2\014\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\001\002\000\020\013\035\021\066\046\034\047\033" +
    "\050\024\051\025\052\065\001\002\000\020\013\035\021" +
    "\066\046\034\047\033\050\024\051\025\052\065\001\002" +
    "\000\020\013\035\021\066\046\034\047\033\050\024\051" +
    "\025\052\065\001\002\000\020\013\035\021\066\046\034" +
    "\047\033\050\024\051\025\052\065\001\002\000\020\013" +
    "\035\021\066\046\034\047\033\050\024\051\025\052\065" +
    "\001\002\000\022\002\uffc8\010\uffc8\014\uffc8\022\072\023" +
    "\074\024\uffc8\025\uffc8\026\075\001\002\000\022\002\uffc7" +
    "\010\uffc7\014\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\001\002\000\022\002\uffca\010\uffca\014\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\001\002\000\022\002" +
    "\uffc9\010\uffc9\014\uffc9\022\072\023\074\024\uffc9\025\uffc9" +
    "\026\075\001\002\000\022\002\uffcb\010\uffcb\014\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\001\002\000\020" +
    "\013\035\021\066\046\034\047\033\050\024\051\025\052" +
    "\065\001\002\000\016\014\106\022\072\023\074\024\073" +
    "\025\076\026\075\001\002\000\022\002\uffd0\010\uffd0\014" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\001\002" +
    "\000\020\013\035\021\066\046\034\047\033\050\024\051" +
    "\025\052\065\001\002\000\016\010\111\022\072\023\074" +
    "\024\073\025\076\026\075\001\002\000\020\013\035\021" +
    "\066\046\034\047\033\050\024\051\025\052\065\001\002" +
    "\000\016\010\113\022\072\023\074\024\073\025\076\026" +
    "\075\001\002\000\020\013\035\021\066\046\034\047\033" +
    "\050\024\051\025\052\065\001\002\000\020\010\115\014" +
    "\116\022\072\023\074\024\073\025\076\026\075\001\002" +
    "\000\006\015\021\052\120\001\002\000\022\002\uffcf\010" +
    "\uffcf\014\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\001\002\000\004\014\uffc5\001\002\000\004\014\uffc6\001" +
    "\002\000\004\014\122\001\002\000\022\002\uffcd\010\uffcd" +
    "\014\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\001" +
    "\002\000\004\054\124\001\002\000\004\002\uffe4\001\002" +
    "\000\004\054\126\001\002\000\004\002\uffe2\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\ufffb\001\002\000\020\013\035\021\066\046\034\047" +
    "\033\050\024\051\025\052\065\001\002\000\016\010\134" +
    "\022\072\023\074\024\073\025\076\026\075\001\002\000" +
    "\020\013\035\021\066\046\034\047\033\050\024\051\025" +
    "\052\065\001\002\000\020\010\137\014\136\022\072\023" +
    "\074\024\073\025\076\026\075\001\002\000\022\002\uffce" +
    "\010\uffce\014\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\001\002\000\006\015\021\052\120\001\002\000\004" +
    "\014\141\001\002\000\022\002\uffcc\010\uffcc\014\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\001\002\000\004" +
    "\020\144\001\002\000\004\020\uffbb\001\002\000\012\007" +
    "\uffba\012\uffba\021\150\052\151\001\002\000\006\007\156" +
    "\012\155\001\002\000\016\002\uffb8\007\uffb8\010\uffb8\012" +
    "\uffb8\016\uffb8\022\153\001\002\000\014\002\uffb9\007\uffb9" +
    "\010\uffb9\012\uffb9\016\uffb9\001\002\000\004\052\152\001" +
    "\002\000\016\002\uffb6\007\uffb6\010\uffb6\012\uffb6\016\uffb6" +
    "\022\uffb6\001\002\000\016\002\uffb5\007\uffb5\010\uffb5\012" +
    "\uffb5\016\uffb5\022\uffb5\001\002\000\006\021\150\052\151" +
    "\001\002\000\014\002\uffb7\007\uffb7\010\uffb7\012\uffb7\016" +
    "\uffb7\001\002\000\010\007\uffba\021\150\052\151\001\002" +
    "\000\014\002\uffba\010\uffba\016\uffba\021\150\052\151\001" +
    "\002\000\010\002\uffbd\010\uffbd\016\uffbd\001\002\000\004" +
    "\007\161\001\002\000\014\002\uffba\010\uffba\016\uffba\021" +
    "\150\052\151\001\002\000\010\002\uffbe\010\uffbe\016\uffbe" +
    "\001\002\000\004\016\172\001\002\000\010\002\uffbf\010" +
    "\uffbf\016\uffbf\001\002\000\006\010\170\016\uffc2\001\002" +
    "\000\006\002\uffc4\014\uffc4\001\002\000\010\002\uffc0\010" +
    "\uffc0\016\uffc0\001\002\000\006\017\022\052\167\001\002" +
    "\000\004\016\uffc1\001\002\000\006\002\uffc3\014\uffc3\001" +
    "\002\000\006\021\174\052\175\001\002\000\004\052\177" +
    "\001\002\000\004\014\176\001\002\000\006\002\uffdf\004" +
    "\uffdf\001\002\000\004\014\200\001\002\000\006\002\uffde" +
    "\004\uffde\001\002\000\004\054\202\001\002\000\004\002" +
    "\uffe6\001\002\000\006\017\022\052\167\001\002\000\010" +
    "\034\216\036\217\040\215\001\002\000\024\013\035\015" +
    "\021\017\022\021\066\046\034\047\033\050\024\051\211" +
    "\052\213\001\002\000\006\017\022\052\167\001\002\000" +
    "\004\002\uffe8\001\002\000\004\002\uffea\001\002\000\016" +
    "\002\uffed\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\001" +
    "\002\000\004\002\uffec\001\002\000\016\002\uffee\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\001\002\000\004\002" +
    "\uffeb\001\002\000\006\002\uffda\004\uffda\001\002\000\006" +
    "\002\uffe0\004\uffe0\001\002\000\006\002\uffdd\004\uffdd\001" +
    "\002\000\004\002\uffe9\001\002\000\020\002\uffd5\011\222" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\001\002\000" +
    "\004\036\223\001\002\000\006\002\uffdc\004\uffdc\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\030\002\003\003\015\004\026\005\017\006" +
    "\006\007\031\010\012\011\010\013\030\017\027\020\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\067\010" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\164\017\163\021" +
    "\162\001\001\000\004\023\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\062\007\031\010\066\011\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\067\010\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\102\007" +
    "\031\010\066\011\063\001\001\000\012\005\101\007\031" +
    "\010\066\011\063\001\001\000\012\005\100\007\031\010" +
    "\066\011\063\001\001\000\012\005\077\007\031\010\066" +
    "\011\063\001\001\000\012\005\076\007\031\010\066\011" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\104\007\031\010\066\011\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\107\007\031\010\066\011" +
    "\063\001\001\000\002\001\001\000\012\005\111\007\031" +
    "\010\066\011\063\001\001\000\002\001\001\000\012\005" +
    "\113\007\031\010\066\011\063\001\001\000\002\001\001" +
    "\000\006\016\120\020\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\132\007\031\010\066\011" +
    "\063\001\001\000\002\001\001\000\012\005\134\007\031" +
    "\010\066\011\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\137\020\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\145\014\144\022\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\145\022\153" +
    "\001\001\000\002\001\001\000\010\012\145\014\157\022" +
    "\146\001\001\000\010\012\145\014\156\022\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\145\014" +
    "\161\022\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\164\017\163\021\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\217\017\163\001\001\000\002\001\001" +
    "\000\020\005\017\006\211\007\031\010\012\011\010\017" +
    "\213\020\207\001\001\000\006\015\206\017\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PLAKConsoleParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$PLAKConsoleParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PLAKConsoleParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}



	
	// Fields :
	
	private RevisorConsolePLAK console;
	private String inputText;
	private String errorMessages;
	
	// Constructors :
	
	public PLAKConsoleParser(final RevisorConsolePLAK console, final String inputText) {
		super();
		this.console = console;
		this.inputText = inputText;
	}
	
	public PLAKConsoleParser(final RevisorConsolePLAK console, final String inputText, final Scanner scanner) {
		super(scanner);
		this.console = console;
		this.inputText = inputText;
	}
	
	public PLAKConsoleParser(final RevisorConsolePLAK console, final String inputText, final Scanner scanner, final SymbolFactory factory) {
		super(scanner, factory);
		this.console = console;
		this.inputText = inputText;
	}
	
	// Getters :
	
	public RevisorConsolePLAK getConsole() {
		return this.console;
	}
	
	public String getInputText() {
		return this.inputText;
	}
	
	public String getErrorMessage() {
		return this.errorMessages;
	}
	
	// Methods :
	
	private void addErrorMessage(String message) {
		if(this.errorMessages == null || this.errorMessages.isEmpty()) {
			this.errorMessages = message;
		}
		else {
			this.errorMessages += "\n" + message;
		}
	}
	
	@Override
	public void report_error(String message, Object info) {
		StringBuffer buffer = new StringBuffer("Parsing Error");
		
		if(info instanceof Symbol) {
			Symbol s = (Symbol) info;
			
			if(s.left >= 0) {
				buffer.append(" at line " + (s.left + 1));
				
				if(s.right >= 0) {
					buffer.append(", column " + (s.right + 1));
				}
			}
		}
		
		buffer.append(" : " + message);
		this.addErrorMessage(buffer.toString());
	}
	
	@Override
	public void report_fatal_error(String message, Object info) throws ParserException {
		this.done_parsing();
		this.report_error(message, info);
		throw new ParserException(this.errorMessages);
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("unused")
class CUP$PLAKConsoleParser$actions {
  private final PLAKConsoleParser parser;

  /** Constructor */
  CUP$PLAKConsoleParser$actions(PLAKConsoleParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PLAKConsoleParser$do_action(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;

      /* select the action based on the action number */
      switch (CUP$PLAKConsoleParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Literal ::= NOT IDENTIFIER 
            {
               CUP$PLAKConsoleParser$result = case76(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Literal ::= IDENTIFIER 
            {
               CUP$PLAKConsoleParser$result = case75(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LiteralSetNotEmpty ::= Literal AND LiteralSetNotEmpty 
            {
               CUP$PLAKConsoleParser$result = case74(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LiteralSetNotEmpty ::= Literal 
            {
               CUP$PLAKConsoleParser$result = case73(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LiteralSet ::= LiteralSetNotEmpty 
            {
               CUP$PLAKConsoleParser$result = case72(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LiteralSet ::= 
            {
               CUP$PLAKConsoleParser$result = case71(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RuleDefCost ::= POSITIVE_REAL 
            {
               CUP$PLAKConsoleParser$result = case70(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RuleDefCost ::= 
            {
               CUP$PLAKConsoleParser$result = case69(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RuleDef ::= L_BRACKET RuleDefCost R_BRACKET LiteralSet REPLACE LiteralSet 
            {
               CUP$PLAKConsoleParser$result = case68(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RuleDef ::= L_BRACKET RuleDefCost R_BRACKET LiteralSet COLON LiteralSet REPLACE LiteralSet 
            {
               CUP$PLAKConsoleParser$result = case67(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RuleExpression ::= RuleDef 
            {
               CUP$PLAKConsoleParser$result = case66(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RuleExpression ::= IDENTIFIER 
            {
               CUP$PLAKConsoleParser$result = case65(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RuleSetNotEmpty ::= RuleExpression COMMA RuleSetNotEmpty 
            {
               CUP$PLAKConsoleParser$result = case64(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RuleSetNotEmpty ::= RuleExpression 
            {
               CUP$PLAKConsoleParser$result = case63(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RuleSetDef ::= L_BRACE RuleSetNotEmpty R_BRACE 
            {
               CUP$PLAKConsoleParser$result = case62(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RuleSetDef ::= L_BRACE R_BRACE 
            {
               CUP$PLAKConsoleParser$result = case61(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RuleSetExpression ::= RuleSetDef 
            {
               CUP$PLAKConsoleParser$result = case60(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RuleSetExpression ::= IDENTIFIER 
            {
               CUP$PLAKConsoleParser$result = case59(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BinaryPropExpression ::= PropExpression XOR PropExpression 
            {
               CUP$PLAKConsoleParser$result = case58(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BinaryPropExpression ::= PropExpression EQU PropExpression 
            {
               CUP$PLAKConsoleParser$result = case57(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BinaryPropExpression ::= PropExpression IMPL PropExpression 
            {
               CUP$PLAKConsoleParser$result = case56(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BinaryPropExpression ::= PropExpression OR PropExpression 
            {
               CUP$PLAKConsoleParser$result = case55(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BinaryPropExpression ::= PropExpression AND PropExpression 
            {
               CUP$PLAKConsoleParser$result = case54(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // UnaryPropExpressionNotId ::= REVISE L_PAR PropExpression COMMA PropExpression COMMA RuleSetExpression R_PAR 
            {
               CUP$PLAKConsoleParser$result = case53(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // UnaryPropExpressionNotId ::= ADAPT L_PAR PropExpression COMMA PropExpression COMMA PropExpression COMMA RuleSetExpression R_PAR 
            {
               CUP$PLAKConsoleParser$result = case52(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // UnaryPropExpressionNotId ::= REVISE L_PAR PropExpression COMMA PropExpression R_PAR 
            {
               CUP$PLAKConsoleParser$result = case51(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // UnaryPropExpressionNotId ::= ADAPT L_PAR PropExpression COMMA PropExpression COMMA PropExpression R_PAR 
            {
               CUP$PLAKConsoleParser$result = case50(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // UnaryPropExpressionNotId ::= DNF L_PAR PropExpression R_PAR 
            {
               CUP$PLAKConsoleParser$result = case49(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UnaryPropExpressionNotId ::= NOT UnaryPropExpression 
            {
               CUP$PLAKConsoleParser$result = case48(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UnaryPropExpressionNotId ::= L_PAR PropExpression R_PAR 
            {
               CUP$PLAKConsoleParser$result = case47(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // UnaryPropExpression ::= UnaryPropExpressionNotId 
            {
               CUP$PLAKConsoleParser$result = case46(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // UnaryPropExpression ::= BOOLEAN 
            {
               CUP$PLAKConsoleParser$result = case45(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // UnaryPropExpression ::= IDENTIFIER 
            {
               CUP$PLAKConsoleParser$result = case44(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PropExpressionNotId ::= BinaryPropExpression 
            {
               CUP$PLAKConsoleParser$result = case43(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PropExpressionNotId ::= UnaryPropExpressionNotId 
            {
               CUP$PLAKConsoleParser$result = case42(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PropExpression ::= BinaryPropExpression 
            {
               CUP$PLAKConsoleParser$result = case41(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PropExpression ::= UnaryPropExpression 
            {
               CUP$PLAKConsoleParser$result = case40(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RuleCost ::= IDENTIFIER DOT RULECOST 
            {
               CUP$PLAKConsoleParser$result = case39(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RuleCost ::= RULECOST L_PAR IDENTIFIER R_PAR 
            {
               CUP$PLAKConsoleParser$result = case38(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VariableFlipCost ::= NOT IDENTIFIER DOT FLIPCOST 
            {
               CUP$PLAKConsoleParser$result = case37(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VariableFlipCost ::= IDENTIFIER DOT FLIPCOST 
            {
               CUP$PLAKConsoleParser$result = case36(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VariableFlipCost ::= FLIPCOST L_PAR NOT IDENTIFIER R_PAR 
            {
               CUP$PLAKConsoleParser$result = case35(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VariableFlipCost ::= FLIPCOST L_PAR IDENTIFIER R_PAR 
            {
               CUP$PLAKConsoleParser$result = case34(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VariableWeight ::= IDENTIFIER DOT WEIGHT 
            {
               CUP$PLAKConsoleParser$result = case33(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VariableWeight ::= WEIGHT L_PAR IDENTIFIER R_PAR 
            {
               CUP$PLAKConsoleParser$result = case32(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruction ::= RuleCost ASSIGN POSITIVE_REAL 
            {
               CUP$PLAKConsoleParser$result = case31(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruction ::= RuleCost 
            {
               CUP$PLAKConsoleParser$result = case30(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruction ::= VariableFlipCost ASSIGN POSITIVE_REAL 
            {
               CUP$PLAKConsoleParser$result = case29(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruction ::= VariableFlipCost 
            {
               CUP$PLAKConsoleParser$result = case28(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruction ::= VariableWeight ASSIGN POSITIVE_REAL 
            {
               CUP$PLAKConsoleParser$result = case27(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruction ::= VariableWeight 
            {
               CUP$PLAKConsoleParser$result = case26(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruction ::= IDENTIFIER REMOVE RuleExpression 
            {
               CUP$PLAKConsoleParser$result = case25(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Instruction ::= IDENTIFIER ADD RuleExpression 
            {
               CUP$PLAKConsoleParser$result = case24(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruction ::= IDENTIFIER ASSIGN RuleSetDef 
            {
               CUP$PLAKConsoleParser$result = case23(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruction ::= IDENTIFIER ASSIGN RuleDef 
            {
               CUP$PLAKConsoleParser$result = case22(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruction ::= IDENTIFIER ASSIGN PropExpressionNotId 
            {
               CUP$PLAKConsoleParser$result = case21(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruction ::= IDENTIFIER ASSIGN BOOLEAN 
            {
               CUP$PLAKConsoleParser$result = case20(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruction ::= IDENTIFIER ASSIGN IDENTIFIER 
            {
               CUP$PLAKConsoleParser$result = case19(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instruction ::= RuleSetDef 
            {
               CUP$PLAKConsoleParser$result = case18(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instruction ::= RuleDef 
            {
               CUP$PLAKConsoleParser$result = case17(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruction ::= PropExpressionNotId 
            {
               CUP$PLAKConsoleParser$result = case16(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruction ::= IDENTIFIER 
            {
               CUP$PLAKConsoleParser$result = case15(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruction ::= DEFAULT RULECOST ASSIGN POSITIVE_REAL 
            {
               CUP$PLAKConsoleParser$result = case14(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= DEFAULT RULECOST 
            {
               CUP$PLAKConsoleParser$result = case13(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= USE DEFAULT RULESET ASSIGN BOOLEAN 
            {
               CUP$PLAKConsoleParser$result = case12(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruction ::= USE DEFAULT RULESET 
            {
               CUP$PLAKConsoleParser$result = case11(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruction ::= RULESETS 
            {
               CUP$PLAKConsoleParser$result = case10(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= RULES 
            {
               CUP$PLAKConsoleParser$result = case9(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= FLIPCOSTS 
            {
               CUP$PLAKConsoleParser$result = case8(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruction ::= WEIGHTS 
            {
               CUP$PLAKConsoleParser$result = case7(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= RESET RULECOSTS 
            {
               CUP$PLAKConsoleParser$result = case6(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= RESET FLIPCOSTS 
            {
               CUP$PLAKConsoleParser$result = case5(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instruction ::= RESET WEIGHTS 
            {
               CUP$PLAKConsoleParser$result = case4(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instruction ::= CLEAR 
            {
               CUP$PLAKConsoleParser$result = case3(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Instruction ::= LOAD FILE 
            {
               CUP$PLAKConsoleParser$result = case2(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Instruction ::= HELP 
            {
               CUP$PLAKConsoleParser$result = case1(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          return CUP$PLAKConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Instruction EOF 
            {
               CUP$PLAKConsoleParser$result = case0(
                 CUP$PLAKConsoleParser$act_num,
                 CUP$PLAKConsoleParser$parser,
                 CUP$PLAKConsoleParser$stack,
                 CUP$PLAKConsoleParser$top);
            }
          /* ACCEPT */
          CUP$PLAKConsoleParser$parser.done_parsing();
          return CUP$PLAKConsoleParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }/*1*/
    //Literal ::= NOT IDENTIFIER 
    java_cup.runtime.Symbol case76(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_Literal<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.peek().left;
		int idright = CUP$PLAKConsoleParser$stack.peek().right;
		String id = (String) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Literal<>(new PL_Identifier<RevisorConsolePLAK>(id), true); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Literal",8, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Literal ::= IDENTIFIER 
    java_cup.runtime.Symbol case75(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_Literal<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.peek().left;
		int idright = CUP$PLAKConsoleParser$stack.peek().right;
		String id = (String) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Literal<>(new PL_Identifier<RevisorConsolePLAK>(id), false); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Literal",8, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //LiteralSetNotEmpty ::= Literal AND LiteralSetNotEmpty 
    java_cup.runtime.Symbol case74(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Set<PL_Literal<RevisorConsolePLAK>> RESULT =null;/*3*/
		int litleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int litright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") PL_Literal<RevisorConsolePLAK> lit = (PL_Literal<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int setleft = CUP$PLAKConsoleParser$stack.peek().left;
		int setright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Set<PL_Literal<RevisorConsolePLAK>> set = (Set<PL_Literal<RevisorConsolePLAK>>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = set; RESULT.add(lit); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("LiteralSetNotEmpty",16, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //LiteralSetNotEmpty ::= Literal 
    java_cup.runtime.Symbol case73(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Set<PL_Literal<RevisorConsolePLAK>> RESULT =null;/*3*/
		int litleft = CUP$PLAKConsoleParser$stack.peek().left;
		int litright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PL_Literal<RevisorConsolePLAK> lit = (PL_Literal<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new TreeSet<>(); RESULT.add(lit); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("LiteralSetNotEmpty",16, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //LiteralSet ::= LiteralSetNotEmpty 
    java_cup.runtime.Symbol case72(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_LiteralSet<RevisorConsolePLAK> RESULT =null;/*3*/
		int literalsleft = CUP$PLAKConsoleParser$stack.peek().left;
		int literalsright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Set<PL_Literal<RevisorConsolePLAK>> literals = (Set<PL_Literal<RevisorConsolePLAK>>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_LiteralSet<>(literals); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("LiteralSet",10, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //LiteralSet ::= 
    java_cup.runtime.Symbol case71(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_LiteralSet<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PL_LiteralSet<>(); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("LiteralSet",10, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleDefCost ::= POSITIVE_REAL 
    java_cup.runtime.Symbol case70(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Double RESULT =null;/*3*/
		int costleft = CUP$PLAKConsoleParser$stack.peek().left;
		int costright = CUP$PLAKConsoleParser$stack.peek().right;
		Double cost = (Double) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = cost; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleDefCost",17, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleDefCost ::= 
    java_cup.runtime.Symbol case69(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Double RESULT =null;/*3*/
		 RESULT = this.parser.getConsole().getDefaultRuleCost(); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleDefCost",17, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleDef ::= L_BRACKET RuleDefCost R_BRACKET LiteralSet REPLACE LiteralSet 
    java_cup.runtime.Symbol case68(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PLAK_Rule<RevisorConsolePLAK> RESULT =null;/*3*/
		int costleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-4).left;
		int costright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-4).right;
		Double cost = (Double) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-4).value;
		int leftleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int leftright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") PL_LiteralSet<RevisorConsolePLAK> left = (PL_LiteralSet<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int rightleft = CUP$PLAKConsoleParser$stack.peek().left;
		int rightright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PL_LiteralSet<RevisorConsolePLAK> right = (PL_LiteralSet<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_Rule<>(new PL_LiteralSet<RevisorConsolePLAK>(), left, right, cost); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleDef",13, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleDef ::= L_BRACKET RuleDefCost R_BRACKET LiteralSet COLON LiteralSet REPLACE LiteralSet 
    java_cup.runtime.Symbol case67(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PLAK_Rule<RevisorConsolePLAK> RESULT =null;/*3*/
		int costleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-6).left;
		int costright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-6).right;
		Double cost = (Double) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-6).value;
		int contextleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-4).left;
		int contextright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-4).right;
		@SuppressWarnings("unchecked") PL_LiteralSet<RevisorConsolePLAK> context = (PL_LiteralSet<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-4).value;
		int leftleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int leftright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") PL_LiteralSet<RevisorConsolePLAK> left = (PL_LiteralSet<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int rightleft = CUP$PLAKConsoleParser$stack.peek().left;
		int rightright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PL_LiteralSet<RevisorConsolePLAK> right = (PL_LiteralSet<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_Rule<>(context, left, right, cost); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleDef",13, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-7), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleExpression ::= RuleDef 
    java_cup.runtime.Symbol case66(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>> RESULT =null;/*3*/
		int defleft = CUP$PLAKConsoleParser$stack.peek().left;
		int defright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PLAK_Rule<RevisorConsolePLAK> def = (PLAK_Rule<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = def; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleExpression",11, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleExpression ::= IDENTIFIER 
    java_cup.runtime.Symbol case65(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.peek().left;
		int idright = CUP$PLAKConsoleParser$stack.peek().right;
		String id = (String) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_RuleIdentifier<>(id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleExpression",11, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleSetNotEmpty ::= RuleExpression COMMA RuleSetNotEmpty 
    java_cup.runtime.Symbol case64(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Set<Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>> RESULT =null;/*3*/
		int ruleleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int ruleright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>> rule = (Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int setleft = CUP$PLAKConsoleParser$stack.peek().left;
		int setright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Set<Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>> set = (Set<Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = set; RESULT.add(rule); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleSetNotEmpty",15, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleSetNotEmpty ::= RuleExpression 
    java_cup.runtime.Symbol case63(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Set<Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>> RESULT =null;/*3*/
		int ruleleft = CUP$PLAKConsoleParser$stack.peek().left;
		int ruleright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>> rule = (Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new TreeSet<>(); RESULT.add(rule); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleSetNotEmpty",15, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleSetDef ::= L_BRACE RuleSetNotEmpty R_BRACE 
    java_cup.runtime.Symbol case62(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PLAK_RuleSet<RevisorConsolePLAK> RESULT =null;/*3*/
		int rulesleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int rulesright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Set<Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>> rules = (Set<Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PLAK_RuleSet<>(rules); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleSetDef",14, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleSetDef ::= L_BRACE R_BRACE 
    java_cup.runtime.Symbol case61(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PLAK_RuleSet<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_RuleSet<>(); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleSetDef",14, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleSetExpression ::= RuleSetDef 
    java_cup.runtime.Symbol case60(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Expression<RevisorConsolePLAK,PLAK_RuleSet<RevisorConsolePLAK>> RESULT =null;/*3*/
		int defleft = CUP$PLAKConsoleParser$stack.peek().left;
		int defright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PLAK_RuleSet<RevisorConsolePLAK> def = (PLAK_RuleSet<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = def; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleSetExpression",12, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleSetExpression ::= IDENTIFIER 
    java_cup.runtime.Symbol case59(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Expression<RevisorConsolePLAK,PLAK_RuleSet<RevisorConsolePLAK>> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.peek().left;
		int idright = CUP$PLAKConsoleParser$stack.peek().right;
		String id = (String) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_RuleSetIdentifier<>(id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleSetExpression",12, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression XOR PropExpression 
    java_cup.runtime.Symbol case58(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int e1right = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e1 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int e2left = CUP$PLAKConsoleParser$stack.peek().left;
		int e2right = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e2 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Xor<>(e1, e2); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",7, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression EQU PropExpression 
    java_cup.runtime.Symbol case57(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int e1right = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e1 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int e2left = CUP$PLAKConsoleParser$stack.peek().left;
		int e2right = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e2 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Equ<>(e1, e2); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",7, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression IMPL PropExpression 
    java_cup.runtime.Symbol case56(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int e1right = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e1 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int e2left = CUP$PLAKConsoleParser$stack.peek().left;
		int e2right = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e2 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Impl<>(e1, e2); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",7, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression OR PropExpression 
    java_cup.runtime.Symbol case55(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int e1right = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e1 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int e2left = CUP$PLAKConsoleParser$stack.peek().left;
		int e2right = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e2 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Or<>(e1, e2); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",7, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //BinaryPropExpression ::= PropExpression AND PropExpression 
    java_cup.runtime.Symbol case54(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int e1left = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int e1right = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e1 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int e2left = CUP$PLAKConsoleParser$stack.peek().left;
		int e2right = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e2 = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_And<>(e1, e2); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("BinaryPropExpression",7, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= REVISE L_PAR PropExpression COMMA PropExpression COMMA RuleSetExpression R_PAR 
    java_cup.runtime.Symbol case53(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int psileft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).left;
		int psiright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> psi = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).value;
		int muleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).left;
		int muright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> mu = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).value;
		int ruleSetleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int ruleSetright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Expression<RevisorConsolePLAK,PLAK_RuleSet<RevisorConsolePLAK>> ruleSet = (Expression<RevisorConsolePLAK,PLAK_RuleSet<RevisorConsolePLAK>>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PLAK_Revise<>(psi, mu, ruleSet); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",6, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-7), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= ADAPT L_PAR PropExpression COMMA PropExpression COMMA PropExpression COMMA RuleSetExpression R_PAR 
    java_cup.runtime.Symbol case52(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int dkleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-7).left;
		int dkright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-7).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> dk = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-7).value;
		int sourceleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).left;
		int sourceright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> source = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).value;
		int targetleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).left;
		int targetright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> target = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).value;
		int ruleSetleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int ruleSetright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Expression<RevisorConsolePLAK,PLAK_RuleSet<RevisorConsolePLAK>> ruleSet = (Expression<RevisorConsolePLAK,PLAK_RuleSet<RevisorConsolePLAK>>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PLAK_Adapt<>(dk, source, target, ruleSet); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",6, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-9), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= REVISE L_PAR PropExpression COMMA PropExpression R_PAR 
    java_cup.runtime.Symbol case51(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int psileft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).left;
		int psiright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> psi = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).value;
		int muleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int muright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> mu = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PL_Revise<>(psi, mu); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",6, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= ADAPT L_PAR PropExpression COMMA PropExpression COMMA PropExpression R_PAR 
    java_cup.runtime.Symbol case50(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int dkleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).left;
		int dkright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> dk = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-5).value;
		int sourceleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).left;
		int sourceright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> source = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3).value;
		int targetleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int targetright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> target = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PL_Adapt<>(dk, source, target); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",6, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-7), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= DNF L_PAR PropExpression R_PAR 
    java_cup.runtime.Symbol case49(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int eright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PL_SimplifiedDNF<>(e); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",6, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= NOT UnaryPropExpression 
    java_cup.runtime.Symbol case48(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Not<>(e); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",6, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpressionNotId ::= L_PAR PropExpression R_PAR 
    java_cup.runtime.Symbol case47(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int eright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = e; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpressionNotId",6, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpression ::= UnaryPropExpressionNotId 
    java_cup.runtime.Symbol case46(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = e; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpression",5, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpression ::= BOOLEAN 
    java_cup.runtime.Symbol case45(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int bleft = CUP$PLAKConsoleParser$stack.peek().left;
		int bright = CUP$PLAKConsoleParser$stack.peek().right;
		Boolean b = (Boolean) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Identifier<>(b ? "true" : "false"); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpression",5, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //UnaryPropExpression ::= IDENTIFIER 
    java_cup.runtime.Symbol case44(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.peek().left;
		int idright = CUP$PLAKConsoleParser$stack.peek().right;
		String id = (String) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Identifier<>(id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("UnaryPropExpression",5, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //PropExpressionNotId ::= BinaryPropExpression 
    java_cup.runtime.Symbol case43(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = e; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("PropExpressionNotId",4, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //PropExpressionNotId ::= UnaryPropExpressionNotId 
    java_cup.runtime.Symbol case42(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = e; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("PropExpressionNotId",4, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //PropExpression ::= BinaryPropExpression 
    java_cup.runtime.Symbol case41(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = e; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("PropExpression",3, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //PropExpression ::= UnaryPropExpression 
    java_cup.runtime.Symbol case40(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Formula<RevisorConsolePLAK,PLFormula> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = e; /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("PropExpression",3, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleCost ::= IDENTIFIER DOT RULECOST 
    java_cup.runtime.Symbol case39(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PLAK_RuleIdentifier<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		 RESULT = new PLAK_RuleIdentifier<>(id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleCost",2, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //RuleCost ::= RULECOST L_PAR IDENTIFIER R_PAR 
    java_cup.runtime.Symbol case38(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PLAK_RuleIdentifier<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PLAK_RuleIdentifier<>(id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("RuleCost",2, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //VariableFlipCost ::= NOT IDENTIFIER DOT FLIPCOST 
    java_cup.runtime.Symbol case37(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_Literal<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		 RESULT = new PL_Literal<>(new PL_Identifier<RevisorConsolePLAK>(id), true); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("VariableFlipCost",9, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //VariableFlipCost ::= IDENTIFIER DOT FLIPCOST 
    java_cup.runtime.Symbol case36(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_Literal<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		 RESULT = new PL_Literal<>(new PL_Identifier<RevisorConsolePLAK>(id), false); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("VariableFlipCost",9, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //VariableFlipCost ::= FLIPCOST L_PAR NOT IDENTIFIER R_PAR 
    java_cup.runtime.Symbol case35(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_Literal<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PL_Literal<>(new PL_Identifier<RevisorConsolePLAK>(id), true); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("VariableFlipCost",9, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-4), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //VariableFlipCost ::= FLIPCOST L_PAR IDENTIFIER R_PAR 
    java_cup.runtime.Symbol case34(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_Literal<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PL_Literal<>(new PL_Identifier<RevisorConsolePLAK>(id), false); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("VariableFlipCost",9, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //VariableWeight ::= IDENTIFIER DOT WEIGHT 
    java_cup.runtime.Symbol case33(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_Identifier<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		 RESULT = new PL_Identifier<>(id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("VariableWeight",1, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //VariableWeight ::= WEIGHT L_PAR IDENTIFIER R_PAR 
    java_cup.runtime.Symbol case32(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      PL_Identifier<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		 RESULT = new PL_Identifier<>(id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("VariableWeight",1, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RuleCost ASSIGN POSITIVE_REAL 
    java_cup.runtime.Symbol case31(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") PLAK_RuleIdentifier<RevisorConsolePLAK> id = (PLAK_RuleIdentifier<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int valleft = CUP$PLAKConsoleParser$stack.peek().left;
		int valright = CUP$PLAKConsoleParser$stack.peek().right;
		Double val = (Double) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_SetRuleCost<>(this.parser.getConsole(), this.parser.getInputText(), id, val); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RuleCost 
    java_cup.runtime.Symbol case30(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.peek().left;
		int idright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PLAK_RuleIdentifier<RevisorConsolePLAK> id = (PLAK_RuleIdentifier<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_GetRuleCost<>(this.parser.getConsole(), this.parser.getInputText(), id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= VariableFlipCost ASSIGN POSITIVE_REAL 
    java_cup.runtime.Symbol case29(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int litleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int litright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") PL_Literal<RevisorConsolePLAK> lit = (PL_Literal<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int valleft = CUP$PLAKConsoleParser$stack.peek().left;
		int valright = CUP$PLAKConsoleParser$stack.peek().right;
		Double val = (Double) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_SetFlipCost<>(this.parser.getConsole(), this.parser.getInputText(), lit, val); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= VariableFlipCost 
    java_cup.runtime.Symbol case28(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int litleft = CUP$PLAKConsoleParser$stack.peek().left;
		int litright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PL_Literal<RevisorConsolePLAK> lit = (PL_Literal<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_GetFlipCost<>(this.parser.getConsole(), this.parser.getInputText(), lit); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= VariableWeight ASSIGN POSITIVE_REAL 
    java_cup.runtime.Symbol case27(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		@SuppressWarnings("unchecked") PL_Identifier<RevisorConsolePLAK> id = (PL_Identifier<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int valleft = CUP$PLAKConsoleParser$stack.peek().left;
		int valright = CUP$PLAKConsoleParser$stack.peek().right;
		Double val = (Double) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_SetWeight<>(this.parser.getConsole(), this.parser.getInputText(), id, val); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= VariableWeight 
    java_cup.runtime.Symbol case26(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.peek().left;
		int idright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PL_Identifier<RevisorConsolePLAK> id = (PL_Identifier<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_GetWeight<>(this.parser.getConsole(), this.parser.getInputText(), id); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER REMOVE RuleExpression 
    java_cup.runtime.Symbol case25(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>> e = (Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_RemoveRule<>(this.parser.getConsole(), this.parser.getInputText(), new PLAK_RuleSetIdentifier<RevisorConsolePLAK>(id), e); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER ADD RuleExpression 
    java_cup.runtime.Symbol case24(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>> e = (Expression<RevisorConsolePLAK,PLAK_Rule<RevisorConsolePLAK>>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_AddRule<>(this.parser.getConsole(), this.parser.getInputText(), new PLAK_RuleSetIdentifier<RevisorConsolePLAK>(id), e); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER ASSIGN RuleSetDef 
    java_cup.runtime.Symbol case23(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int defleft = CUP$PLAKConsoleParser$stack.peek().left;
		int defright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PLAK_RuleSet<RevisorConsolePLAK> def = (PLAK_RuleSet<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_RuleSetAssignment<>(this.parser.getConsole(), this.parser.getInputText(), new PLAK_RuleSetIdentifier<RevisorConsolePLAK>(id), def); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER ASSIGN RuleDef 
    java_cup.runtime.Symbol case22(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int defleft = CUP$PLAKConsoleParser$stack.peek().left;
		int defright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PLAK_Rule<RevisorConsolePLAK> def = (PLAK_Rule<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_RuleAssignment<>(this.parser.getConsole(), this.parser.getInputText(), new PLAK_RuleIdentifier<RevisorConsolePLAK>(id), def); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER ASSIGN PropExpressionNotId 
    java_cup.runtime.Symbol case21(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Assignment<>(this.parser.getConsole(), this.parser.getInputText(), new PL_Identifier<RevisorConsolePLAK>(id), e); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER ASSIGN BOOLEAN 
    java_cup.runtime.Symbol case20(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int bleft = CUP$PLAKConsoleParser$stack.peek().left;
		int bright = CUP$PLAKConsoleParser$stack.peek().right;
		Boolean b = (Boolean) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PL_Assignment<>(this.parser.getConsole(), this.parser.getInputText(), new PL_Identifier<RevisorConsolePLAK>(id), new PL_Identifier<RevisorConsolePLAK>(b ? "true" : "false")); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER ASSIGN IDENTIFIER 
    java_cup.runtime.Symbol case19(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).left;
		int idright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).right;
		String id = (String) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2).value;
		int id2left = CUP$PLAKConsoleParser$stack.peek().left;
		int id2right = CUP$PLAKConsoleParser$stack.peek().right;
		String id2 = (String) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_Assignment<>(this.parser.getConsole(), this.parser.getInputText(), new PLAK_Identifier<RevisorConsolePLAK>(id), new PLAK_Identifier<RevisorConsolePLAK>(id2)); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RuleSetDef 
    java_cup.runtime.Symbol case18(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int defleft = CUP$PLAKConsoleParser$stack.peek().left;
		int defright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PLAK_RuleSet<RevisorConsolePLAK> def = (PLAK_RuleSet<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new Display<>(this.parser.getConsole(), this.parser.getInputText(), def); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RuleDef 
    java_cup.runtime.Symbol case17(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int defleft = CUP$PLAKConsoleParser$stack.peek().left;
		int defright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") PLAK_Rule<RevisorConsolePLAK> def = (PLAK_Rule<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new Display<>(this.parser.getConsole(), this.parser.getInputText(), def); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= PropExpressionNotId 
    java_cup.runtime.Symbol case16(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int eleft = CUP$PLAKConsoleParser$stack.peek().left;
		int eright = CUP$PLAKConsoleParser$stack.peek().right;
		@SuppressWarnings("unchecked") Formula<RevisorConsolePLAK,PLFormula> e = (Formula<RevisorConsolePLAK,PLFormula>) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new Display<>(this.parser.getConsole(), this.parser.getInputText(), e); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= IDENTIFIER 
    java_cup.runtime.Symbol case15(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int idleft = CUP$PLAKConsoleParser$stack.peek().left;
		int idright = CUP$PLAKConsoleParser$stack.peek().right;
		String id = (String) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new Display<>(this.parser.getConsole(), this.parser.getInputText(), new PLAK_Identifier<RevisorConsolePLAK>(id)); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= DEFAULT RULECOST ASSIGN POSITIVE_REAL 
    java_cup.runtime.Symbol case14(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int valleft = CUP$PLAKConsoleParser$stack.peek().left;
		int valright = CUP$PLAKConsoleParser$stack.peek().right;
		Double val = (Double) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_SetDefaultRuleCost<>(this.parser.getConsole(), this.parser.getInputText(), val); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-3), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= DEFAULT RULECOST 
    java_cup.runtime.Symbol case13(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_GetDefaultRuleCost<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= USE DEFAULT RULESET ASSIGN BOOLEAN 
    java_cup.runtime.Symbol case12(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int flagleft = CUP$PLAKConsoleParser$stack.peek().left;
		int flagright = CUP$PLAKConsoleParser$stack.peek().right;
		Boolean flag = (Boolean) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new PLAK_SetUseDefaultRuleSet<>(this.parser.getConsole(), this.parser.getInputText(), flag); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-4), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= USE DEFAULT RULESET 
    java_cup.runtime.Symbol case11(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_GetUseDefaultRuleSet<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-2), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RULESETS 
    java_cup.runtime.Symbol case10(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_RuleSets<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RULES 
    java_cup.runtime.Symbol case9(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_Rules<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= FLIPCOSTS 
    java_cup.runtime.Symbol case8(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_FlipCosts<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= WEIGHTS 
    java_cup.runtime.Symbol case7(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_FlipCosts<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RESET RULECOSTS 
    java_cup.runtime.Symbol case6(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_ResetRuleCosts<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RESET FLIPCOSTS 
    java_cup.runtime.Symbol case5(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_ResetFlipCosts<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= RESET WEIGHTS 
    java_cup.runtime.Symbol case4(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PL_ResetWeights<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= CLEAR 
    java_cup.runtime.Symbol case3(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new Clear<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= LOAD FILE 
    java_cup.runtime.Symbol case2(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		int fileleft = CUP$PLAKConsoleParser$stack.peek().left;
		int fileright = CUP$PLAKConsoleParser$stack.peek().right;
		String file = (String) CUP$PLAKConsoleParser$stack.peek().value;
		 RESULT = new Load<>(this.parser.getConsole(), this.parser.getInputText(), file); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //Instruction ::= HELP 
    java_cup.runtime.Symbol case1(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Instruction<RevisorConsolePLAK> RESULT =null;/*3*/
		 RESULT = new PLAK_Help<>(this.parser.getConsole(), this.parser.getInputText()); /*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("Instruction",0, CUP$PLAKConsoleParser$stack.peek(), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
    //$START ::= Instruction EOF 
    java_cup.runtime.Symbol case0(
    int                        CUP$PLAKConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PLAKConsoleParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$PLAKConsoleParser$stack,
    int                        CUP$PLAKConsoleParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$PLAKConsoleParser$result;
      Object RESULT =null;/*3*/
		int start_valleft = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).left;
		int start_valright = CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).right;
		@SuppressWarnings("unchecked") Instruction<RevisorConsolePLAK> start_val = (Instruction<RevisorConsolePLAK>) CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1).value;
		RESULT = start_val;/*5*/
              CUP$PLAKConsoleParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$PLAKConsoleParser$stack.elementAt(CUP$PLAKConsoleParser$top-1), CUP$PLAKConsoleParser$stack.peek(), RESULT); /*6*/
      return CUP$PLAKConsoleParser$result;/*8*/

    }
}

