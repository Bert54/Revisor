
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fr.loria.k.revisor.engine.revisorPCSFC.console.parser;

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.util.ArrayList;
import fr.loria.orpailleur.revisor.engine.core.console.exception.ParserException;
import fr.loria.orpailleur.revisor.engine.core.console.formula.Formula;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Clear;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Display;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Instruction;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Load;
import fr.loria.k.revisor.engine.revisorPCSFC.console.RevisorConsolePCSFC;
import fr.loria.k.revisor.engine.revisorPCSFC.console.formula.*;
import fr.loria.k.revisor.engine.revisorPCSFC.console.instruction.*;
import fr.loria.k.revisor.engine.revisorPCSFC.pcsfc.*;
import fr.loria.k.revisor.engine.revisorPCSFC.console.formula.constraint.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PCSFCConsoleParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PCSFCConsoleSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public PCSFCConsoleParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PCSFCConsoleParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PCSFCConsoleParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\006\005\000\002" +
    "\007\005\000\002\010\006\000\002\012\005\000\002\012" +
    "\003\000\002\011\005\000\002\013\003\000\002\013\003" +
    "\000\002\014\012\000\002\015\005\000\002\015\006\000" +
    "\002\015\005\000\002\015\007\000\002\015\010\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\005\000\002\020\003\000\002\021\005" +
    "\000\002\021\003\000\002\022\004\000\002\022\003\000" +
    "\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\012\004\016\006\004\012\015\020\007\001" +
    "\002\000\004\011\ufffc\001\002\000\004\011\ufffe\001\002" +
    "\000\004\011\107\001\002\000\004\012\104\001\002\000" +
    "\004\011\ufffb\001\002\000\004\002\103\001\002\000\006" +
    "\007\076\010\075\001\002\000\004\011\ufff9\001\002\000" +
    "\004\011\ufff8\001\002\000\010\007\ufff2\010\ufff2\014\022" +
    "\001\002\000\004\005\021\001\002\000\004\011\uffff\001" +
    "\002\000\004\011\ufffa\001\002\000\004\011\ufffd\001\002" +
    "\000\016\012\034\021\032\022\035\025\030\026\023\030" +
    "\033\001\002\000\014\012\034\021\032\022\035\026\023" +
    "\030\033\001\002\000\006\011\uffef\031\051\001\002\000" +
    "\004\011\ufff1\001\002\000\010\011\uffe7\027\uffe7\031\uffe7" +
    "\001\002\000\006\023\uffe1\024\uffe1\001\002\000\004\026" +
    "\064\001\002\000\004\011\ufff0\001\002\000\004\012\063" +
    "\001\002\000\004\026\047\001\002\000\014\011\uffe6\023" +
    "\uffdf\024\uffdf\027\uffe6\031\uffe6\001\002\000\010\011\uffe5" +
    "\027\uffe5\031\uffe5\001\002\000\004\023\044\001\002\000" +
    "\010\011\uffe8\027\uffe8\031\uffe8\001\002\000\006\023\uffe3" +
    "\024\041\001\002\000\006\012\042\021\032\001\002\000" +
    "\006\023\uffdf\024\uffdf\001\002\000\006\023\uffe2\024\uffe2" +
    "\001\002\000\004\021\046\001\002\000\010\011\uffe4\027" +
    "\uffe4\031\uffe4\001\002\000\010\011\uffde\027\uffde\031\uffde" +
    "\001\002\000\014\012\034\021\032\022\035\026\023\030" +
    "\033\001\002\000\006\027\052\031\051\001\002\000\014" +
    "\012\034\021\032\022\035\026\053\030\054\001\002\000" +
    "\010\011\uffec\027\uffec\031\uffec\001\002\000\014\012\034" +
    "\021\032\022\035\026\023\030\033\001\002\000\004\026" +
    "\056\001\002\000\010\011\uffeb\027\uffeb\031\uffeb\001\002" +
    "\000\014\012\034\021\032\022\035\026\023\030\033\001" +
    "\002\000\006\027\060\031\051\001\002\000\010\011\uffe9" +
    "\027\uffe9\031\uffe9\001\002\000\006\027\062\031\051\001" +
    "\002\000\010\011\uffea\027\uffea\031\uffea\001\002\000\006" +
    "\023\uffe0\024\uffe0\001\002\000\004\012\065\001\002\000" +
    "\004\010\066\001\002\000\004\012\067\001\002\000\004" +
    "\010\070\001\002\000\004\012\071\001\002\000\004\027" +
    "\072\001\002\000\004\011\uffee\001\002\000\006\027\074" +
    "\031\051\001\002\000\010\011\uffed\027\uffed\031\uffed\001" +
    "\002\000\004\012\102\001\002\000\010\015\077\016\100" +
    "\017\101\001\002\000\004\011\ufff7\001\002\000\004\011" +
    "\ufff6\001\002\000\004\011\ufff5\001\002\000\006\007\ufff3" +
    "\010\ufff3\001\002\000\004\002\001\001\002\000\004\013" +
    "\105\001\002\000\004\021\106\001\002\000\004\011\ufff4" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\024\002\010\003\005\004\016\005\007\006" +
    "\017\007\012\010\013\011\004\012\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\024\014\030\015\023\016\036\017" +
    "\025\020\035\021\037\022\026\001\001\000\016\015\072" +
    "\016\036\017\025\020\035\021\037\022\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\047\016\036\017\025\020\035\021\037" +
    "\022\026\001\001\000\002\001\001\000\014\016\054\017" +
    "\025\020\035\021\037\022\026\001\001\000\002\001\001" +
    "\000\016\015\060\016\036\017\025\020\035\021\037\022" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\056\016\036\017\025\020\035\021\037\022\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PCSFCConsoleParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PCSFCConsoleParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PCSFCConsoleParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	// Fields :
	
	private RevisorConsolePCSFC console;
	private String inputText;
	private String errorMessages;
	
	// Constructors :
	
	public PCSFCConsoleParser(final RevisorConsolePCSFC console, final String inputText) {
		super();
		this.console = console;
		this.inputText = inputText;
	}
	
	public PCSFCConsoleParser(final RevisorConsolePCSFC console, final String inputText, final Scanner scanner) {
		super(scanner);
		this.console = console;
		this.inputText = inputText;
	}
	
	public PCSFCConsoleParser(final RevisorConsolePCSFC console, final String inputText, final Scanner scanner, final SymbolFactory factory) {
		super(scanner, factory);
		this.console = console;
		this.inputText = inputText;
	}
	
	// Getters :
	
	public RevisorConsolePCSFC getConsole() {
		return this.console;
	}
	
	public String getInputText() {
		return this.inputText;
	}
	
	public String getErrorMessage() {
		return this.errorMessages;
	}
	
	// Methods :
	
	private void addErrorMessage(String message) {
		if(this.errorMessages == null || this.errorMessages.isEmpty()) {
			this.errorMessages = message;
		}
		else {
			this.errorMessages += "\n" + message;
		}
	}
	
	@Override
	public void report_error(String message, Object info) {
		StringBuffer buffer = new StringBuffer("Parsing Error");
		
		if(info instanceof Symbol) {
			Symbol s = (Symbol) info;
			
			if(s.left >= 0) {
				buffer.append(" at line " + (s.left + 1));
				
				if(s.right >= 0) {
					buffer.append(", column " + (s.right + 1));
				}
			}
		}
		
		buffer.append(" : " + message);
		this.addErrorMessage(buffer.toString());
	}
	
	@Override
	public void report_fatal_error(String message, Object info) throws ParserException {
		this.done_parsing();
		this.report_error(message, info);
		throw new ParserException(this.errorMessages);
	}
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PCSFCConsoleParser$actions {
  private final PCSFCConsoleParser parser;

  /** Constructor */
  CUP$PCSFCConsoleParser$actions(PCSFCConsoleParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PCSFCConsoleParser$do_action_part00000000(
    int                        CUP$PCSFCConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PCSFCConsoleParser$parser,
    java.util.Stack            CUP$PCSFCConsoleParser$stack,
    int                        CUP$PCSFCConsoleParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PCSFCConsoleParser$result;

      /* select the action based on the action number */
      switch (CUP$PCSFCConsoleParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INSTRUCTION EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		Instruction<RevisorConsolePCSFC> start_val = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		RESULT = start_val;
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PCSFCConsoleParser$parser.done_parsing();
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INSTRUCTION ::= RAW_INSTRUCTION END_OF_INSTRUCTION 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int raw_insleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int raw_insright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		Instruction<RevisorConsolePCSFC> raw_ins = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		
									RESULT = raw_ins;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",0, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RAW_INSTRUCTION ::= DECLARATION 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = decl; 
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("RAW_INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RAW_INSTRUCTION ::= ASSIGNMENT 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> ass = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = ass; 
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("RAW_INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RAW_INSTRUCTION ::= LOAD FILE 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								RESULT = new Load<>(this.parser.getConsole(), this.parser.getInputText(), file);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("RAW_INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RAW_INSTRUCTION ::= CLEAR 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		
									RESULT = new PCSFC_Clear<>(this.parser.getConsole(), this.parser.getInputText());
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("RAW_INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATION ::= DECLARE_INTEGER 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int decl_intleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int decl_intright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl_int = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = decl_int; 
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= DECLARE_REAL 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int decl_releft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int decl_reright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl_re = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = decl_re; 
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= DECLARE_FORMULA 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int decl_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int decl_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl_form = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = decl_form; 
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= DECLARE_CONSTANT 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int decl_constleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int decl_constright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl_const = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = decl_const; 
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARE_INTEGER ::= IDENTIFIER_LIST COLON INTEGER_DECLARATION_KEYWORD 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int alidfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int alidfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		ArrayList<String> alidf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		
									RESULT = new PCSFC_DeclarationInteger<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), alidf);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARE_INTEGER",3, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARE_REAL ::= IDENTIFIER_LIST COLON REAL_DECLARATION_KEYWORD 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int alidfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int alidfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		ArrayList<String> alidf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		
									RESULT = new PCSFC_DeclarationReal<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), alidf);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARE_REAL",4, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARE_FORMULA ::= IDENTIFIER_LIST COLON FORMULA_DECLARATION_KEYWORD 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int alidfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int alidfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		ArrayList<String> alidf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		
									RESULT = new PCSFC_DeclarationFormula<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), alidf);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FORMULA",5, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARE_CONSTANT ::= CONST_DECLARATION_KEYWORD IDENTIFIER CONST_INITIALIZER_OPERATOR REAL 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		int realleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String real = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = new PCSFC_DeclarationConstant<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), idf, real);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARE_CONSTANT",6, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDENTIFIER_LIST ::= IDENTIFIER_LIST COMMA IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int alidfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int alidfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		ArrayList<String> alidf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									alidf.add(idf);
									RESULT = alidf;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("IDENTIFIER_LIST",8, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDENTIFIER_LIST ::= IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									ArrayList<String> alidf = new ArrayList<>();
									alidf.add(idf);
									RESULT = alidf;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("IDENTIFIER_LIST",8, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASSIGNMENT ::= IDENTIFIER ASSIGNMENT_OPERATOR FORMULA 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		int formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> form = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = new PCSFC_Assignment<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), new PCSFC_Identifier<RevisorConsolePCSFC>(idf), form); 
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",7, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FORMULA ::= REVISE_FORMULA 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int rev_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int rev_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> rev_form = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = rev_form;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("FORMULA",9, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FORMULA ::= BINARY_FORMULA 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int bin_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int bin_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> bin_form = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = bin_form;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("FORMULA",9, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REVISE_FORMULA ::= REVISE_KEYWORD OPENING_PARENTHESIS IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER CLOSING_PARENTHESIS 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int idf1left = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-5)).left;
		int idf1right = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-5)).right;
		String idf1 = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-5)).value;
		int idf2left = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)).left;
		int idf2right = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)).right;
		String idf2 = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)).value;
		int idf3left = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int idf3right = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		String idf3 = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		
									RESULT = new PCSFC_Revise(idf1, idf2, idf3);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("REVISE_FORMULA",10, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-7)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BINARY_FORMULA ::= OPENING_PARENTHESIS BINARY_FORMULA CLOSING_PARENTHESIS 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int bin_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int bin_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> bin_form = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		
									RESULT = bin_form;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("BINARY_FORMULA",11, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BINARY_FORMULA ::= NEGATIVE_FORMULA_SYMBOL OPENING_PARENTHESIS BINARY_FORMULA CLOSING_PARENTHESIS 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int bin_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int bin_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> bin_form = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		
									RESULT = new PCSFC_Not<RevisorConsolePCSFC>(bin_form);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("BINARY_FORMULA",11, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BINARY_FORMULA ::= BINARY_FORMULA BINARY_FORMULA_OPERATOR UNARY_FORMULA 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int bin_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int bin_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> bin_form = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		int un_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int un_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> un_form = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									Formula<RevisorConsolePCSFC, PCSFCFormula> formula;
									switch (op) {
										case "&":
											formula = new PCSFC_And(bin_form, un_form);
											break;
										case "|":
											formula = new PCSFC_Or(bin_form, un_form);
											break;
										default:
											formula = new PCSFC_And(bin_form, un_form);
									}
									RESULT = formula;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("BINARY_FORMULA",11, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BINARY_FORMULA ::= BINARY_FORMULA BINARY_FORMULA_OPERATOR OPENING_PARENTHESIS BINARY_FORMULA CLOSING_PARENTHESIS 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int bin_form_leftleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-4)).left;
		int bin_form_leftright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-4)).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> bin_form_left = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)).value;
		int bin_form_rightleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int bin_form_rightright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> bin_form_right = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		
									Formula<RevisorConsolePCSFC, PCSFCFormula> formula;
									switch (op) {
										case "&":
											formula = new PCSFC_And(bin_form_left, bin_form_right);
											break;
										case "|":
											formula = new PCSFC_Or(bin_form_left, bin_form_right);
											break;
										default:
											formula = new PCSFC_And(bin_form_left, bin_form_right);
									}
									RESULT = formula;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("BINARY_FORMULA",11, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-4)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BINARY_FORMULA ::= BINARY_FORMULA BINARY_FORMULA_OPERATOR NEGATIVE_FORMULA_SYMBOL OPENING_PARENTHESIS BINARY_FORMULA CLOSING_PARENTHESIS 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int bin_form_leftleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-5)).left;
		int bin_form_leftright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-5)).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> bin_form_left = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-4)).value;
		int bin_form_rightleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int bin_form_rightright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> bin_form_right = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		
									Formula<RevisorConsolePCSFC, PCSFCFormula> formula;
									switch (op) {
										case "&":
											formula = new PCSFC_And(bin_form_left, new PCSFC_Not(bin_form_right));
											break;
										case "|":
											formula = new PCSFC_Or(bin_form_left, new PCSFC_Not(bin_form_right));
											break;
										default:
											formula = new PCSFC_And(bin_form_left, new PCSFC_Not(bin_form_right));
									}
									RESULT = formula;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("BINARY_FORMULA",11, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-5)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BINARY_FORMULA ::= UNARY_FORMULA 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int un_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int un_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> un_form = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = un_form;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("BINARY_FORMULA",11, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // UNARY_FORMULA ::= CONSTRAINT_FORMULA 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Formula<RevisorConsolePCSFC,PCSFCFormula> cf = (Formula<RevisorConsolePCSFC,PCSFCFormula>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = cf;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("UNARY_FORMULA",12, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // UNARY_FORMULA ::= IDENTIFIER 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = new PCSFC_IdentifierLitteral<RevisorConsolePCSFC>(new PCSFC_Identifier<RevisorConsolePCSFC>(idf));
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("UNARY_FORMULA",12, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // UNARY_FORMULA ::= TAUTOLOGY_FORMULA 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		
									RESULT = new PCSFC_TautologyLitteral<RevisorConsolePCSFC>();
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("UNARY_FORMULA",12, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONSTRAINT_FORMULA ::= CONSTRAINT_LEFT_MEMBER CONSTRAINT_OPERATOR CONSTRAINT_RIGHT_MEMBER 
            {
              Formula<RevisorConsolePCSFC,PCSFCFormula> RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		LeftMember left = (LeftMember)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		RightMember<Double> right = (RightMember<Double>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									ConstraintOperator operator;
									switch (co) {
										case "<=":
											operator = new ConstraintOperatorLessEquals();
											break;
										case "<":
											operator = new ConstraintOperatorLess();
											break;
										case ">=":
											operator = new ConstraintOperatorMoreEquals();
											break;
										case ">":
											operator = new ConstraintOperatorMore();
											break;
										case "!=":
											operator = new ConstraintOperatorNotEquals();
											break;
										case "==":
											operator = new ConstraintOperatorEquals();
											break;
										default:
											operator = new ConstraintOperatorMore();
									}
									RESULT = new PCSFC_ConstraintLitteral<RevisorConsolePCSFC>(left, operator, right);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_FORMULA",13, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONSTRAINT_LEFT_MEMBER ::= CONSTRAINT_TERM_LIST 
            {
              LeftMember RESULT =null;
		int ctlleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int ctlright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		LeftMember ctl = (LeftMember)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = ctl;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_LEFT_MEMBER",14, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONSTRAINT_TERM_LIST ::= CONSTRAINT_TERM_LIST CONSTRAINT_TERM_OPERATOR CONSTRAINT_TERM 
            {
              LeftMember RESULT =null;
		int ctlleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int ctlright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		LeftMember ctl = (LeftMember)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		LeftMemberElementTerminal<Double,RevisorConsolePCSFC> term = (LeftMemberElementTerminal<Double,RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									LeftMemberArithmeticOperator operator;
									switch (oper) {
										case "+":
											operator = new LeftMemberArithmeticOperatorAdd();
											break;
										case "-":
											operator = new LeftMemberArithmeticOperatorSub();
											break;
										default:
											operator = new LeftMemberArithmeticOperatorAdd();
									}
									RESULT = new LeftMemberElement(ctl, operator, term);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_TERM_LIST",15, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONSTRAINT_TERM_LIST ::= CONSTRAINT_TERM 
            {
              LeftMember RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		LeftMemberElementTerminal<Double,RevisorConsolePCSFC> term = (LeftMemberElementTerminal<Double,RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = term;
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_TERM_LIST",15, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONSTRAINT_TERM ::= REAL IDENTIFIER 
            {
              LeftMemberElementTerminal<Double,RevisorConsolePCSFC> RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int realright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		String real = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = new LeftMemberElementTerminal<Double, RevisorConsolePCSFC>(Double.parseDouble(real), new PCSFC_Identifier<RevisorConsolePCSFC>(idf));
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_TERM",16, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONSTRAINT_TERM ::= IDENTIFIER 
            {
              LeftMemberElementTerminal<Double,RevisorConsolePCSFC> RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									RESULT = new LeftMemberElementTerminal<Double, RevisorConsolePCSFC>((double)1, new PCSFC_Identifier<RevisorConsolePCSFC>(idf));
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_TERM",16, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONSTRAINT_RIGHT_MEMBER ::= REAL 
            {
              RightMember<Double> RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String real = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
									double d = Double.parseDouble(real);
									RESULT = new RightMember<Double>(d);
								
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_RIGHT_MEMBER",17, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PCSFCConsoleParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PCSFCConsoleParser$do_action(
    int                        CUP$PCSFCConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PCSFCConsoleParser$parser,
    java.util.Stack            CUP$PCSFCConsoleParser$stack,
    int                        CUP$PCSFCConsoleParser$top)
    throws java.lang.Exception
    {
              return CUP$PCSFCConsoleParser$do_action_part00000000(
                               CUP$PCSFCConsoleParser$act_num,
                               CUP$PCSFCConsoleParser$parser,
                               CUP$PCSFCConsoleParser$stack,
                               CUP$PCSFCConsoleParser$top);
    }
}

}
