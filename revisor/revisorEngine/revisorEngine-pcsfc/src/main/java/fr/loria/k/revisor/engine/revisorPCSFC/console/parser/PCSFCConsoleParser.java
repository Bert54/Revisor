
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fr.loria.k.revisor.engine.revisorPCSFC.console.parser;

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.util.ArrayList;
import fr.loria.orpailleur.revisor.engine.core.console.exception.ParserException;
import fr.loria.orpailleur.revisor.engine.core.console.formula.Formula;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Clear;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Display;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Instruction;
import fr.loria.orpailleur.revisor.engine.core.console.instruction.Load;
import fr.loria.k.revisor.engine.revisorPCSFC.console.RevisorConsolePCSFC;
import fr.loria.k.revisor.engine.revisorPCSFC.console.formula.*;
import fr.loria.k.revisor.engine.revisorPCSFC.console.instruction.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PCSFCConsoleParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PCSFCConsoleSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public PCSFCConsoleParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PCSFCConsoleParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PCSFCConsoleParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\005\000\002\006\005\000\002\007\005\000\002" +
    "\010\006\000\002\011\005\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\012\004\013\006\004\012\014\017\006\001" +
    "\002\000\004\011\ufffd\001\002\000\004\011\033\001\002" +
    "\000\004\012\030\001\002\000\004\011\ufffc\001\002\000" +
    "\004\002\027\001\002\000\006\007\022\010\021\001\002" +
    "\000\004\011\ufffa\001\002\000\004\005\020\001\002\000" +
    "\006\007\ufff3\010\ufff3\001\002\000\004\011\ufff9\001\002" +
    "\000\004\011\ufffb\001\002\000\004\011\uffff\001\002\000" +
    "\004\011\ufffe\001\002\000\004\012\026\001\002\000\010" +
    "\014\023\015\025\016\024\001\002\000\004\011\ufff8\001" +
    "\002\000\004\011\ufff6\001\002\000\004\011\ufff7\001\002" +
    "\000\006\007\ufff4\010\ufff4\001\002\000\004\002\001\001" +
    "\002\000\004\013\031\001\002\000\004\020\032\001\002" +
    "\000\004\011\ufff5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\022\002\007\003\004\004\016\005\006\006" +
    "\015\007\011\010\014\011\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PCSFCConsoleParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PCSFCConsoleParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PCSFCConsoleParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	// Fields :
	
	private RevisorConsolePCSFC console;
	private String inputText;
	private String errorMessages;
	
	// Constructors :
	
	public PCSFCConsoleParser(final RevisorConsolePCSFC console, final String inputText) {
		super();
		this.console = console;
		this.inputText = inputText;
	}
	
	public PCSFCConsoleParser(final RevisorConsolePCSFC console, final String inputText, final Scanner scanner) {
		super(scanner);
		this.console = console;
		this.inputText = inputText;
	}
	
	public PCSFCConsoleParser(final RevisorConsolePCSFC console, final String inputText, final Scanner scanner, final SymbolFactory factory) {
		super(scanner, factory);
		this.console = console;
		this.inputText = inputText;
	}
	
	// Getters :
	
	public RevisorConsolePCSFC getConsole() {
		return this.console;
	}
	
	public String getInputText() {
		return this.inputText;
	}
	
	public String getErrorMessage() {
		return this.errorMessages;
	}
	
	// Methods :
	
	private void addErrorMessage(String message) {
		if(this.errorMessages == null || this.errorMessages.isEmpty()) {
			this.errorMessages = message;
		}
		else {
			this.errorMessages += "\n" + message;
		}
	}
	
	@Override
	public void report_error(String message, Object info) {
		StringBuffer buffer = new StringBuffer("Parsing Error");
		
		if(info instanceof Symbol) {
			Symbol s = (Symbol) info;
			
			if(s.left >= 0) {
				buffer.append(" at line " + (s.left + 1));
				
				if(s.right >= 0) {
					buffer.append(", column " + (s.right + 1));
				}
			}
		}
		
		buffer.append(" : " + message);
		this.addErrorMessage(buffer.toString());
	}
	
	@Override
	public void report_fatal_error(String message, Object info) throws ParserException {
		this.done_parsing();
		this.report_error(message, info);
		throw new ParserException(this.errorMessages);
	}
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PCSFCConsoleParser$actions {
  private final PCSFCConsoleParser parser;

  /** Constructor */
  CUP$PCSFCConsoleParser$actions(PCSFCConsoleParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PCSFCConsoleParser$do_action_part00000000(
    int                        CUP$PCSFCConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PCSFCConsoleParser$parser,
    java.util.Stack            CUP$PCSFCConsoleParser$stack,
    int                        CUP$PCSFCConsoleParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PCSFCConsoleParser$result;

      /* select the action based on the action number */
      switch (CUP$PCSFCConsoleParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INSTRUCTION EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		Instruction<RevisorConsolePCSFC> start_val = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		RESULT = start_val;
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PCSFCConsoleParser$parser.done_parsing();
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INSTRUCTION ::= RAW_INSTRUCTION END_OF_INSTRUCTION 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int raw_insleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).left;
		int raw_insright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).right;
		Instruction<RevisorConsolePCSFC> raw_ins = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)).value;
		
								RESULT = raw_ins;
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",0, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RAW_INSTRUCTION ::= DECLARATION 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								RESULT = decl; 
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("RAW_INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RAW_INSTRUCTION ::= LOAD FILE 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								RESULT = new Load<>(this.parser.getConsole(), this.parser.getInputText(), file);
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("RAW_INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RAW_INSTRUCTION ::= CLEAR 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		
								RESULT = new Clear<>(this.parser.getConsole(), this.parser.getInputText());
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("RAW_INSTRUCTION",1, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATION ::= DECLARE_INTEGER 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int decl_intleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int decl_intright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl_int = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								RESULT = decl_int; 
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATION ::= DECLARE_REAL 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int decl_releft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int decl_reright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl_re = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								RESULT = decl_re; 
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= DECLARE_FORMULA 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int decl_formleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int decl_formright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl_form = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								RESULT = decl_form; 
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= DECLARE_CONSTANT 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int decl_constleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int decl_constright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		Instruction<RevisorConsolePCSFC> decl_const = (Instruction<RevisorConsolePCSFC>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								RESULT = decl_const; 
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARE_INTEGER ::= IDENTIFIER_LIST COLON INTEGER_DECLARATION_KEYWORD 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int alidfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int alidfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		ArrayList<String> alidf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		
								RESULT = new PCSFC_DeclarationInteger<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), alidf);
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARE_INTEGER",3, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARE_REAL ::= IDENTIFIER_LIST COLON REAL_DECLARATION_KEYWORD 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int alidfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int alidfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		ArrayList<String> alidf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		
								RESULT = new PCSFC_DeclarationReal<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), alidf);
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARE_REAL",4, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARE_FORMULA ::= IDENTIFIER_LIST COLON FORMULA_DECLARATION_KEYWORD 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int alidfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int alidfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		ArrayList<String> alidf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		
								RESULT = new PCSFC_DeclarationFormula<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), alidf);
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FORMULA",5, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARE_CONSTANT ::= CONST_DECLARATION_KEYWORD IDENTIFIER CONST_INITIALIZER_OPERATOR REAL 
            {
              Instruction<RevisorConsolePCSFC> RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		int realleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String real = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								RESULT = new PCSFC_DeclarationConstant<RevisorConsolePCSFC>(this.parser.getConsole(), this.parser.getInputText(), idf, real);
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("DECLARE_CONSTANT",6, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDENTIFIER_LIST ::= IDENTIFIER_LIST COMMA IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int alidfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).left;
		int alidfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).right;
		ArrayList<String> alidf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)).value;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								alidf.add(idf);
								RESULT = alidf;
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("IDENTIFIER_LIST",7, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.elementAt(CUP$PCSFCConsoleParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDENTIFIER_LIST ::= IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$PCSFCConsoleParser$stack.peek()).value;
		
								ArrayList<String> alidf = new ArrayList<>();
								alidf.add(idf);
								RESULT = alidf;
							
              CUP$PCSFCConsoleParser$result = parser.getSymbolFactory().newSymbol("IDENTIFIER_LIST",7, ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCSFCConsoleParser$stack.peek()), RESULT);
            }
          return CUP$PCSFCConsoleParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PCSFCConsoleParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PCSFCConsoleParser$do_action(
    int                        CUP$PCSFCConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$PCSFCConsoleParser$parser,
    java.util.Stack            CUP$PCSFCConsoleParser$stack,
    int                        CUP$PCSFCConsoleParser$top)
    throws java.lang.Exception
    {
              return CUP$PCSFCConsoleParser$do_action_part00000000(
                               CUP$PCSFCConsoleParser$act_num,
                               CUP$PCSFCConsoleParser$parser,
                               CUP$PCSFCConsoleParser$stack,
                               CUP$PCSFCConsoleParser$top);
    }
}

}
